/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Textbook = {
  _type: 'textbook';
  name?: string;
  url?: string;
};

export type Review = {
  _id: string;
  _type: 'review';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  course?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'course';
  };
  semester?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'semester';
  };
  body?: string;
  rating?: number;
  difficulty?: number;
  workload?: number;
  authorId?: string;
};

export type Semester = {
  _id: string;
  _type: 'semester';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  term?: 'spring' | 'summer' | 'fall';
  startDate?: string;
};

export type Program = {
  _id: string;
  _type: 'program';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  acronym?: string;
  url?: string;
};

export type Course = {
  _id: string;
  _type: 'course';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  codes?: Array<string>;
  programs?: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'program';
  }>;
  description?: string;
  creditHours?: number;
  syllabus?: Syllabus;
  textbooks?: Array<
    {
      _key: string;
    } & Textbook
  >;
  officialURL?: string;
  notesURL?: string;
  tags?: Array<string>;
  isDeprecated?: boolean;
  isFoundational?: boolean;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type Syllabus = {
  _type: 'syllabus';
  file?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset';
    };
    media?: unknown;
    _type: 'file';
  };
  url?: string;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Textbook
  | Review
  | Semester
  | Program
  | Course
  | SanityFileAsset
  | SanityAssetSourceData
  | Syllabus
  | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: src/app/page.tsx
// Variable: RECENT_REVIEWS_QUERY
// Query: *[_type == "review"]{..., course->{codes}}|order(_createdAt desc)[0...10]
export type RECENT_REVIEWS_QUERYResult = Array<{
  _id: string;
  _type: 'review';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  course: {
    codes: Array<string> | null;
  } | null;
  semester?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'semester';
  };
  body?: string;
  rating?: number;
  difficulty?: number;
  workload?: number;
  authorId?: string;
}>;

// Source: src/app/reviews/[id]/page.tsx
// Variable: REVIEW_BY_ID_QUERY
// Query: *[_type == "review" && _id == $id]{..., course->{name}, semester->}[0]
export type REVIEW_BY_ID_QUERYResult = {
  _id: string;
  _type: 'review';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  course: {
    name: string | null;
  } | null;
  semester: {
    _id: string;
    _type: 'semester';
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    term?: 'fall' | 'spring' | 'summer';
    startDate?: string;
  } | null;
  body?: string;
  rating?: number;
  difficulty?: number;
  workload?: number;
  authorId?: string;
} | null;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '*[_type == "review"]{..., course->{codes}}|order(_createdAt desc)[0...10]': RECENT_REVIEWS_QUERYResult;
    '*[_type == "review" && _id == $id]{..., course->{name}, semester->}[0]': REVIEW_BY_ID_QUERYResult;
  }
}
